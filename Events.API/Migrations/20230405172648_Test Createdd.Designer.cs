// <auto-generated />
using System;
using Events.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Events.API.Migrations
{
  [DbContext(typeof(DataContext))]
  [Migration("20230405172648_Test Createdd")]
  partial class TestCreatedd
  {
    /// <inheritdoc />
    protected override void BuildTargetModel(ModelBuilder modelBuilder)
    {
#pragma warning disable 612, 618
      modelBuilder.HasAnnotation("ProductVersion", "7.0.4");

      modelBuilder.Entity("Events.API.Models.Event", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("TEXT");

            b.Property<string>("Description")
                      .IsRequired()
                      .HasColumnType("TEXT");

            b.Property<DateTime>("EndDate")
                      .HasColumnType("TEXT");

            b.Property<Guid>("OwnerId")
                      .HasColumnType("TEXT");

            b.Property<DateTime>("StartDate")
                      .HasColumnType("TEXT");

            b.Property<string>("Title")
                      .IsRequired()
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("OwnerId");

            b.ToTable("Events");
          });

      modelBuilder.Entity("Events.API.Models.Invitation", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("TEXT");

            b.Property<Guid>("EventId")
                      .HasColumnType("TEXT");

            b.Property<Guid>("EventOwnerId")
                      .HasColumnType("TEXT");

            b.Property<int>("InviteState")
                      .HasColumnType("INTEGER");

            b.Property<Guid>("InvitedId")
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            b.HasIndex("EventId");

            b.HasIndex("EventOwnerId");

            b.HasIndex("InvitedId");

            b.ToTable("Invitations");
          });

      modelBuilder.Entity("Events.API.Models.User", b =>
          {
            b.Property<Guid>("Id")
                      .ValueGeneratedOnAdd()
                      .HasColumnType("TEXT");

            b.Property<string>("Email")
                      .HasColumnType("TEXT");

            b.Property<string>("FirstName")
                      .IsRequired()
                      .HasColumnType("TEXT");

            b.Property<string>("LastName")
                      .IsRequired()
                      .HasColumnType("TEXT");

            b.Property<string>("UserName")
                      .IsRequired()
                      .HasColumnType("TEXT");

            b.HasKey("Id");

            // b.HasIndex("EventId");

            b.ToTable("Users");
          });

      modelBuilder.Entity("Events.API.Models.Event", b =>
          {
            b.HasOne("Events.API.Models.User", "Owner")
                      .WithMany("Events")
                      .HasForeignKey("OwnerId")
                      .OnDelete(DeleteBehavior.Restrict);

            b.Navigation("Owner");
          });

      modelBuilder.Entity("Events.API.Models.Invitation", b =>
          {
            b.HasOne("Events.API.Models.Event", "Event")
                      .WithMany("Invitations")
                      .HasForeignKey("EventId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.HasOne("Events.API.Models.User", "EventOwner")
                      .WithMany("Invites")
                      .HasForeignKey("EventOwnerId")
                      .OnDelete(DeleteBehavior.Restrict)
                      .IsRequired();

            b.HasOne("Events.API.Models.User", "Invited")
                      .WithMany()
                      .HasForeignKey("InvitedId")
                      .OnDelete(DeleteBehavior.Cascade)
                      .IsRequired();

            b.Navigation("Event");

            b.Navigation("EventOwner");

            b.Navigation("Invited");
          });

      //   modelBuilder.Entity("Events.API.Models.User", b =>
      //       {
      //         b.HasOne("Events.API.Models.Event", null)
      //                   .WithMany("Participants")
      //                   .HasForeignKey("EventId");
      //       });

      modelBuilder.Entity("Events.API.Models.Event", b =>
          {
            b.Navigation("Invitations");

            b.Navigation("Participants");
          });

      modelBuilder.Entity("Events.API.Models.User", b =>
          {
            b.Navigation("Events");

            b.Navigation("Invites");
          });
#pragma warning restore 612, 618
    }
  }
}
